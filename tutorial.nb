(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[     42749,        943]
NotebookOptionsPosition[     22735,        502]
NotebookOutlinePosition[     41492,        918]
CellTagsIndexPosition[     41449,        915]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["AI Based Organ Detection", "Title",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{
  3.953003261733726*^9, {3.95300460417626*^9, 
   3.953004616736231*^9}},ExpressionUUID->"93fcdfb1-a583-49fc-bc07-\
d93de6df1881"],

Cell["Gruppo numero 1: Morgan ", "Subtitle",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.953003474049737*^9, 3.953003484651434*^9}, {
  3.9530045631258287`*^9, 3.953004568142741*^9}},
 FontColor->RGBColor[
  0.7498130769817655, 0., 
   0.03247119859616999],ExpressionUUID->"c651d3da-35f1-417d-8300-\
82372e659e11"],

Cell[TextData[StyleBox["MC 2024/2025",
 FontColor->RGBColor[
  0.7448386358434425, 0., 0.01271076523994812]]], "Subtitle",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.953003573527338*^9, 3.953003577125852*^9}, {
  3.953003651797236*^9, 
  3.953003656006226*^9}},ExpressionUUID->"848a9044-d4e5-4e85-af1f-\
0f327b6d8446"],

Cell["FOTO1 FOTO2 FOTO3 FTO4 FOTO5", "Text",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.9530036651012907`*^9, 
  3.9530036873334713`*^9}},ExpressionUUID->"f4a9fc12-c802-4fd6-83ce-\
68766b8ecc86"],

Cell[TextData[StyleBox["Giuseppe Spathis, Matteo Fontana, Federico Augelli, \
Emanuele di Sante, Alessandro Mencarelli",
 FontColor->RGBColor[0.7496757457846952, 0., 0.03179980163271534]]], "Author",\

 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.953003704746303*^9, 3.953003733491577*^9}, {
  3.953004499788789*^9, 
  3.953004504095313*^9}},ExpressionUUID->"78fad76d-2c59-488e-a333-\
3816a8d4e9b1"],

Cell[TextData[StyleBox["(anno 1, curriculum C), (anno 1, curriculum A), (anno \
2, curriculum A) (anno 1, cirriculum A) (anno 1, curriculum A)",
 FontColor->RGBColor[0.7448386358434425, 0., 0.02374303807125963]]], "Text",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{{3.953003950627871*^9, 3.9530039664070063`*^9}, {
  3.9530040032182293`*^9, 3.953004057822535*^9}, {3.953004513350209*^9, 
  3.9530045375131807`*^9}, {3.953009050826796*^9, 
  3.953009051460822*^9}},ExpressionUUID->"0f600f28-f76c-4d81-99bb-\
0adf37b5827e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", "\n", "    ", 
    RowBox[{
     RowBox[{"file", " ", "=", " ", "\"\<\>\""}], ",", "\n", "    ", 
     RowBox[{"result", " ", "=", " ", "\"\<\>\""}], ",", "\n", "    ", 
     RowBox[{"fileSet", " ", "=", " ", "False"}], ",", "\n", "    ", 
     RowBox[{"errorMsg", " ", "=", " ", "\"\<\>\""}], ",", "\n", "    ", 
     RowBox[{"imgPreview", " ", "=", " ", "None"}], ",", "\n", "    ", 
     "updateFileState"}], "\n", "  ", "}"}], ",", "\n", "\n", "  ", 
   RowBox[{"(*", " ", 
    RowBox[{"Helper", " ", 
     RowBox[{"function", ":", " ", 
      RowBox[{"Accetta", " ", "solo", " ", 
       RowBox[{
        RowBox[{"PNG", "/", "JPG"}], "/", "JPEG"}]}]}]}], " ", "*)"}], "\n", 
   "  ", 
   RowBox[{
    RowBox[{
     RowBox[{"updateFileState", "[", "newFile_String", "]"}], " ", ":=", " ", 
     RowBox[{"(", "\n", "    ", 
      RowBox[{
       RowBox[{"file", " ", "=", " ", "newFile"}], ";", "\n", "    ", 
       RowBox[{"errorMsg", " ", "=", " ", "\"\<\>\""}], ";", "\n", "    ", 
       RowBox[{"imgPreview", " ", "=", " ", "None"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"Reset", " ", "preview"}], " ", "*)"}], "\n", "    ", 
       RowBox[{"fileSet", " ", "=", " ", "False"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"Reset", " ", "file", " ", "status"}], " ", "*)"}], "\n", 
       "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringTrim", "[", "file", "]"}], " ", "==", 
          " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"Return", "[", "]"}]}], "]"}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Exit", " ", "if", " ", "file", " ", "path", " ", "is", " ", 
         "empty"}], " ", "*)"}], "\n", "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"FileExistsQ", "[", "file", "]"}], ",", "\n", "      ", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ext", " ", "=", " ", 
              RowBox[{"ToLowerCase", "@", 
               RowBox[{"FileExtension", "[", "file", "]"}]}]}], ",", " ", 
             "importedContent"}], "}"}], ",", "\n", "        ", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"StringMatchQ", "[", 
               RowBox[{"ext", ",", " ", 
                
                RowBox[{"\"\<png\>\"", " ", "|", " ", "\"\<jpg\>\"", " ", "|",
                  " ", "\"\<jpeg\>\""}]}], "]"}], ",", "\n", "          ", 
              RowBox[{
               RowBox[{"Check", "[", "\n", "            ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"importedContent", " ", "=", " ", 
                   RowBox[{"Import", "[", "file", "]"}]}], ";", "\n", 
                  "            ", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"ImageQ", "[", "importedContent", "]"}], ",", 
                    "\n", "              ", 
                    RowBox[{
                    RowBox[{"imgPreview", " ", "=", " ", "importedContent"}], 
                    ";", "\n", "              ", 
                    RowBox[{"fileSet", " ", "=", " ", "True"}], ";"}], ",", 
                    "\n", "              ", 
                    RowBox[{
                    RowBox[{
                    "errorMsg", " ", "=", 
                    " ", "\"\<\:274c File non \[EGrave] un'immagine PNG/JPG \
valida.\>\""}], ";"}]}], "\n", "            ", "]"}]}], ",", "\n", 
                 "            ", 
                 RowBox[{
                  RowBox[{
                  "errorMsg", " ", "=", 
                   " ", "\"\<\:274c Errore durante l'importazione \
dell'immagine.\>\""}], ";", "\n", "            ", 
                  RowBox[{"imgPreview", " ", "=", " ", "None"}], ";"}]}], 
                "\n", "          ", "]"}], ";"}], "\n", "        ", ",", "\n",
               "          ", 
              RowBox[{
               RowBox[{
               "errorMsg", " ", "=", 
                
                " ", "\"\<\:274c Tipo file non supportato (solo .png, .jpg, \
.jpeg).\>\""}], ";", "\n", "          ", 
               RowBox[{"imgPreview", " ", "=", " ", "None"}], ";"}]}], "\n", 
             "        ", "]"}], ";"}]}], "\n", "      ", "]"}], ",", "\n", 
         "      ", 
         RowBox[{
          RowBox[{
          "errorMsg", " ", "=", " ", "\"\<\:274c File non trovato.\>\""}], ";",
           "\n", "      ", 
          RowBox[{"imgPreview", " ", "=", " ", "None"}], ";"}]}], "\n", 
        "    ", "]"}], ";", "\n", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"errorMsg", " ", "=!=", " ", "\"\<\>\""}], ",", " ", 
         RowBox[{"fileSet", " ", "=", " ", "False"}]}], "]"}], ";"}], "\n", 
      "  ", ")"}]}], ";", "\n", "  ", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "Implementazione", " ", "della", " ", "funzione", " ", "organDetect"}], 
      " ", "-", " ", 
      RowBox[{
      "definita", " ", "localmente", " ", "per", " ", 
       "semplicit\[AGrave]"}]}], " ", "*)"}], "\n", "  ", 
    RowBox[{
     RowBox[{"organDetect", "[", "imagePath_", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"img", ",", " ", "detectionResult"}], "}"}], ",", "\n", 
       "    ", 
       RowBox[{
        RowBox[{"img", " ", "=", " ", 
         RowBox[{"Import", "[", "imagePath", "]"}]}], ";", "\n", "    ", "\n",
         "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Qui", " ", "inserire", " ", "il", " ", "codice", " ", "per", " ", 
          "il", " ", "rilevamento", " ", "degli", " ", "organi"}], " ", 
         "*)"}], "\n", "    ", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Per", " ", "ora", " ", "restituisce", " ", "un", " ", "messaggio", " ",
           "di", " ", "esempio"}], " ", "*)"}], "\n", "    ", 
        RowBox[{"detectionResult", " ", "=", " ", 
         RowBox[{"\"\<\:2705 Rilevamento completato per: \>\"", " ", "<>", 
          " ", 
          RowBox[{"FileNameTake", "[", "imagePath", "]"}], " ", "<>", " ", 
          "\n", "                     ", "\"\<\\n\\nOrgani rilevati:\\n- \
Tiroide: 101%\>\""}]}], ";", "\n", "    ", "\n", "    ", 
        RowBox[{"Return", "[", "detectionResult", "]"}], ";"}]}], "\n", "  ", 
      "]"}]}], ";", "\n", "  ", "\n", "  ", 
    RowBox[{"updateFileState", "[", "\"\<\>\"", "]"}], ";", " ", 
    RowBox[{"(*", " ", 
     RowBox[{"Initialize", " ", "state"}], " ", "*)"}], "\n", "\n", "  ", 
    RowBox[{"(*", " ", 
     RowBox[{"Create", " ", "the", " ", "Dialog", " ", "UI"}], " ", "*)"}], 
    "\n", "  ", 
    RowBox[{"CreateDialog", "[", "\n", "    ", 
     RowBox[{
      RowBox[{"Panel", "[", "\n", "      ", 
       RowBox[{
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\n", "          ", 
           RowBox[{
            RowBox[{"Style", "[", 
             
             RowBox[{"\"\<\|01f9e0 Organ Detection Tool\>\"", ",", " ", "26", 
              ",", " ", "Bold", ",", " ", 
              RowBox[{"FontFamily", " ", "->", " ", "\"\<Helvetica\>\""}]}], 
             "]"}], ",", "\n", "          ", 
            RowBox[{"Spacer", "[", "10", "]"}], ",", "\n", "          ", "\n",
             "          ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Selezione", " ", "file", " ", "con", " ", "FileNameSetter"}], 
             " ", "*)"}], "\n", "          ", 
            RowBox[{"Row", "[", 
             RowBox[{"{", "\n", "            ", 
              RowBox[{
               RowBox[{"Style", "[", 
                RowBox[{"\"\<Seleziona immagine: \>\"", ",", " ", "14"}], 
                "]"}], ",", "\n", "            ", 
               RowBox[{"FileNameSetter", "[", "\n", "              ", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"file", ",", " ", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"updateFileState", "[", "#", "]"}], ")"}], 
                    "&"}]}], "]"}], ",", "\n", 
                 "              ", "\"\<Open\>\"", ",", "\n", 
                 "              ", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Immagini\>\"", " ", "->", " ", 
                   RowBox[{"{", 
                    
                    RowBox[{"\"\<*.png\>\"", ",", " ", "\"\<*.jpg\>\"", ",", 
                    " ", "\"\<*.jpeg\>\""}], "}"}]}], "}"}], ",", "\n", 
                 "              ", 
                 RowBox[{"ButtonData", " ", "->", " ", "Automatic"}], ",", 
                 "\n", "              ", 
                 RowBox[{
                 "ButtonNote", " ", "->", 
                  " ", "\"\<Seleziona un'immagine (.png, .jpg, \
.jpeg)\>\""}]}], "\n", "            ", "]"}]}], "\n", "          ", "}"}], 
             "]"}], ",", "\n", "          ", "\n", "          ", 
            RowBox[{"(*", " ", 
             RowBox[{"Display", " ", "stato", " ", "file"}], " ", "*)"}], 
            "\n", "          ", 
            RowBox[{"Dynamic", "[", "\n", "            ", 
             RowBox[{"If", "[", 
              RowBox[{"fileSet", ",", "\n", "              ", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"\"\<\:2705 File selezionato: \>\"", " ", "<>", " ", 
                  RowBox[{"FileNameTake", "[", "file", "]"}]}], ",", " ", 
                 RowBox[{"Darker", "@", "Green"}]}], "]"}], ",", "\n", 
               "              ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"errorMsg", " ", "!=", " ", "\"\<\>\""}], ",", " ", 
                 RowBox[{"Style", "[", 
                  RowBox[{"errorMsg", ",", " ", "Red"}], "]"}], ",", 
                 " ", "\"\<\>\""}], "]"}]}], "\n", "            ", "]"}], 
             "\n", "          ", "]"}], ",", "\n", "          ", "\n", 
            "          ", 
            RowBox[{"Spacer", "[", "10", "]"}], ",", "\n", "          ", "\n",
             "          ", 
            RowBox[{"(*", " ", 
             RowBox[{"Image", " ", "Preview", " ", "Section"}], " ", "*)"}], 
            "\n", "          ", 
            RowBox[{"Dynamic", "[", "\n", "            ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ImageQ", "[", "imgPreview", "]"}], ",", "\n", 
               "              ", 
               RowBox[{"Column", "[", 
                RowBox[{"{", "\n", "                ", 
                 RowBox[{
                  RowBox[{"Style", "[", 
                   
                   RowBox[{"\"\<Anteprima:\>\"", ",", " ", "Italic", ",", " ",
                     "14"}], "]"}], ",", " ", "\n", "                ", 
                  RowBox[{"Image", "[", 
                   RowBox[{"imgPreview", ",", " ", 
                    RowBox[{"ImageSize", " ", "->", " ", "300"}]}], "]"}]}], 
                 "\n", "              ", "}"}], "]"}], ",", "\n", 
               "              ", "\"\<\>\""}], "]"}], "\n", "          ", 
             "]"}], ",", "\n", "\n", "          ", 
            RowBox[{"Spacer", "[", "15", "]"}], ",", "\n", "          ", "\n",
             "          ", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Bottone", " ", "per", " ", "eseguire", " ", "il", " ", 
              "rilevamento"}], " ", "*)"}], "\n", "          ", 
            RowBox[{"Button", "[", "\n", "            ", 
             
             RowBox[{"\"\<Esegui Organ Detection\>\"", ",", "\n", 
              "            ", 
              RowBox[{"If", "[", 
               RowBox[{"fileSet", ",", "\n", "              ", 
                RowBox[{"result", " ", "=", " ", 
                 RowBox[{"organDetect", "[", "file", "]"}]}], ",", "\n", 
                "              ", 
                RowBox[{
                "result", " ", "=", 
                 " ", "\"\<\:26a0\:fe0f Seleziona prima un file .png, .jpg, \
.jpeg valido.\>\""}]}], "\n", "            ", "]"}], ",", "\n", 
              "            ", 
              RowBox[{"ImageSize", " ", "->", " ", 
               RowBox[{"{", 
                RowBox[{"200", ",", " ", "40"}], "}"}]}], ",", "\n", 
              "            ", 
              RowBox[{"Enabled", " ", "->", " ", 
               RowBox[{"Dynamic", "[", "fileSet", "]"}]}]}], "\n", 
             "          ", "]"}], ",", "\n", "\n", "          ", 
            RowBox[{"Spacer", "[", "15", "]"}], ",", "\n", "          ", "\n",
             "          ", 
            RowBox[{"(*", " ", 
             RowBox[{"Result", " ", "Display", " ", "Panel"}], " ", "*)"}], 
            "\n", "          ", 
            RowBox[{"Dynamic", "[", "\n", "            ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringTrim", "[", "result", "]"}], " ", "!=", 
                " ", "\"\<\>\""}], ",", "\n", "              ", 
               RowBox[{"Panel", "[", "\n", "                ", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"result", ",", " ", "14"}], "]"}], ",", "\n", 
                 "                ", 
                 RowBox[{"ImageSize", " ", "->", " ", 
                  RowBox[{"{", 
                   RowBox[{"500", ",", " ", "Automatic"}], "}"}]}]}], "\n", 
                "              ", "]"}], ",", "\n", 
               "              ", "\"\<\>\""}], "]"}], "\n", "          ", 
             "]"}]}], "\n", "        ", "}"}], ",", "\n", "        ", 
          RowBox[{"Spacing", " ", "->", " ", "1.5"}], ",", "\n", "        ", 
          RowBox[{"Alignment", " ", "->", " ", "Center"}]}], "\n", "      ", 
         "]"}], ",", "\n", "      ", 
        RowBox[{"Background", " ", "->", " ", "White"}]}], "\n", "    ", 
       "]"}], ",", "\n", "    ", 
      RowBox[{"WindowTitle", " ", "->", " ", "\"\<Organ Detection Tool\>\""}],
       ",", "\n", "    ", 
      RowBox[{"WindowSize", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"600", ",", " ", "Automatic"}], "}"}]}]}], "\n", "  ", 
     "]"}]}]}], "\n", "]"}]], "Code",
 InitializationCell->True,
 InitializationGroup->True,
 CellChangeTimes->{
  3.953007083433497*^9, {3.953346987018937*^9, 3.9533470227652607`*^9}, 
   3.9533472666770353`*^9, {3.953347349800501*^9, 3.953347442440909*^9}, {
   3.953347489446157*^9, 3.953347491084337*^9}, {3.953347602533642*^9, 
   3.95334760289194*^9}, {3.953347685583802*^9, 3.953347686313628*^9}, {
   3.953347796127501*^9, 3.953347796934599*^9}, 3.95334784904185*^9, {
   3.9533480688506613`*^9, 3.9533480695970297`*^9}, 3.953348171582431*^9, {
   3.953348275626021*^9, 3.953348332065818*^9}, {3.9533484002275553`*^9, 
   3.9533484010106497`*^9}, 3.953348531701033*^9, {3.953348662124753*^9, 
   3.953348663168285*^9}, 3.9533490165919123`*^9, {3.953349218342217*^9, 
   3.9533492191611032`*^9}, {3.953349404958879*^9, 3.9533494054058027`*^9}, {
   3.953349509631791*^9, 3.953349510326066*^9}, {3.953349591806386*^9, 
   3.953349593574562*^9}, {3.953349648818902*^9, 3.953349659265308*^9}, {
   3.953350653633376*^9, 3.953350653963974*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4722122a-b9ba-4ce0-aaea-0eca9acc54d8"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`file$$ = "", $CellContext`result$$ = 
  "", $CellContext`fileSet$$ = False, $CellContext`errorMsg$$ = 
  "", $CellContext`imgPreview$$ = None, $CellContext`updateFileState$$}, 
  TemplateBox[<|
   "obj" -> NotebookObject[
     "dc2d786f-6255-4844-a4e6-61f2dee2ecb5", 
      "ce2173ab-3984-6043-b3ea-fbfa64a3ee74"], "label" -> 
    "\"Organ Detection Tool\""|>,
   "NotebookObjectUUIDsUnsaved"],
  DynamicModuleValues:>{{
    DownValues[$CellContext`updateFileState$$] = {HoldPattern[
         $CellContext`updateFileState$$[
          Pattern[$CellContext`newFile$, 
           Blank[
           String]]]] :> ($CellContext`file$$ = $CellContext`newFile$; \
$CellContext`errorMsg$$ = ""; $CellContext`imgPreview$$ = 
         None; $CellContext`fileSet$$ = False; 
        If[StringTrim[$CellContext`file$$] == "", 
          Return[]]; If[
          FileExistsQ[$CellContext`file$$], 
          Module[{$CellContext`ext$ = ToLowerCase[
              
              FileExtension[$CellContext`file$$]], \
$CellContext`importedContent$}, If[
             StringMatchQ[$CellContext`ext$, 
              Alternatives["png", "jpg", "jpeg"]], 
             Check[$CellContext`importedContent$ = 
                Import[$CellContext`file$$]; If[
                 
                 ImageQ[$CellContext`importedContent$], \
$CellContext`imgPreview$$ = $CellContext`importedContent$; \
$CellContext`fileSet$$ = True; 
                 Null, $CellContext`errorMsg$$ = 
                  "\:274c File non \[EGrave] un'immagine PNG/JPG valida."; 
                 Null], $CellContext`errorMsg$$ = 
                "\:274c Errore durante l'importazione dell'immagine."; \
$CellContext`imgPreview$$ = None; Null]; 
             Null, $CellContext`errorMsg$$ = 
              "\:274c Tipo file non supportato (solo .png, .jpg, .jpeg)."; \
$CellContext`imgPreview$$ = None; Null]; Null], $CellContext`errorMsg$$ = 
           "\:274c File non trovato."; $CellContext`imgPreview$$ = None; 
          Null]; If[$CellContext`errorMsg$$ =!= "", $CellContext`fileSet$$ = 
          False]; Null)}}}]], "Output",
 CellChangeTimes->{
  3.953354138576275*^9, 3.9536034191884937`*^9, 3.9536039374013767`*^9, 
   3.953617763121771*^9, {3.9536183503193855`*^9, 3.9536183697888985`*^9}, {
   3.9536184125513744`*^9, 3.95361843883041*^9}, 3.953618635822172*^9, 
   3.9536196375273533`*^9, 3.9536201259356136`*^9, {3.953621389411291*^9, 
   3.95362140563739*^9}, 3.9539857743261557`*^9, 3.954562777713545*^9, {
   3.954568182278467*^9, 3.9545682027531586`*^9}},
 CellLabel->"Out[1]=",ExpressionUUID->"d5675b50-68e5-9947-bc68-789ffd6cf9c0"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9536213585317383`*^9, 3.953621360182272*^9}, 
   3.9536214033841724`*^9, {3.954568139678751*^9, 3.954568144824011*^9}, 
   3.9545681983680344`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"441de2af-a374-bf4e-b1c1-f0823b66c925"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"SetDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Get", "[", "\"\<OrganDetection.m\>\"", "]"}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Print", "[", "\"\<Calling ObjectDetection`FineTune[]...\>\"", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"ObjectDetection`FineTune", "[", "]"}], "]"}], ",", 
      RowBox[{"BaseStyle", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<GenericButton\>\"", ",", "12", ",", "Bold"}], "}"}]}]}], 
     "]"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"base", " ", "=", " ", 
    RowBox[{"FineTune", "[", "]"}], " ", 
    RowBox[{"(*", "?", "*)"}]}]}]}]], "Input",
 CellChangeTimes->{{3.9533543590677166`*^9, 3.953354409860489*^9}, {
   3.953603643969675*^9, 3.953603644419939*^9}, {3.953603702832714*^9, 
   3.95360388536203*^9}, {3.9536182992528553`*^9, 3.9536183046858826`*^9}, {
   3.9536184287872543`*^9, 3.953618434017023*^9}, {3.953618603413994*^9, 
   3.9536186590348797`*^9}, 3.9536189924103928`*^9, {3.953620299438652*^9, 
   3.953620306514595*^9}, {3.9536203725685863`*^9, 3.9536204004775143`*^9}, {
   3.9536213455724907`*^9, 3.953621350229328*^9}, {3.953985790016202*^9, 
   3.953985802156034*^9}, {3.9539858353888903`*^9, 3.953985839591661*^9}, {
   3.9545628421352425`*^9, 3.9545628533780365`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"293914fd-3896-654c-9a8b-51fcb730c0fd"]
}, Open  ]]
},
InitializationCellEvaluation->True,
InitializationCellWarning->False,
WindowSize->{700.5, 717},
WindowMargins->{{6.75, Automatic}, {6.75, Automatic}},
Magnification:>1.8 Inherited,
FrontEndVersion->"14.2 for Microsoft Windows (64-bit) (December 26, 2024)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["DarkStyle for Notebooks", "Title"], 
      Cell[
       StyleData[StyleDefinitions -> "Default.nb"]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Tongue menu cells", "Section"], 
         Cell[
          StyleData[
          "WolframAlphaShort", StyleDefinitions -> StyleData["Input"]], 
          StyleKeyMapping -> {
           "=" -> "WolframAlphaLong", "Backspace" -> "Input"}, EvaluationMode -> 
          "WolframAlphaShort", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[FreeformPrompt]", FontColor -> RGBColor[0, 0.7, 1]]]], 
             None}, {None, None}}, DefaultFormatType -> TextForm, 
          ShowCodeAssist -> False, FormatType -> TextForm, FontFamily -> 
          "Helvetica"], 
         Cell[
          StyleData[
          "WolframAlphaShortInput", StyleDefinitions -> StyleData["Input"]], 
          EvaluationMode -> "WolframAlphaShort", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[FreeformPrompt]", FontColor -> RGBColor[0, 0.7, 1]]], 
              CellBaseline -> Baseline], None}, {None, None}}, ShowCodeAssist -> 
          False, FormatType -> TextForm, FontFamily -> "Helvetica"], 
         Cell[
          StyleData[
          "WolframAlphaLong", StyleDefinitions -> StyleData["Input"]], 
          StyleKeyMapping -> {
           "=" -> "Input", "Backspace" -> "WolframAlphaShort"}, 
          EvaluationMode -> "WolframAlphaLong", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[WolframAlphaPrompt]", FontColor -> RGBColor[0, 0.7, 1]]]], 
             None}, {None, None}}, DefaultFormatType -> TextForm, 
          ShowCodeAssist -> False, FormatType -> TextForm, FontFamily -> 
          "Helvetica"], 
         Cell[
          StyleData["WolframAlphaFullOutput"], 
          CellMargins -> {{20, 10}, {Inherited, Inherited}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ExternalLanguage"], CellFrame -> 1, 
             CellMargins -> {{66, 10}, {8, 8}}, 
             StyleKeyMapping -> {"Backspace" -> "Input"}, Evaluatable -> True,
              EvaluationMode -> "ExternalLanguage", CellGroupingRules -> 
             "InputGrouping", StripStyleOnPaste -> True, 
             CellEvaluationLanguage -> "Python", 
             CellFrameMargins -> {{4, 8}, {8, 8}}, CellFrameColor -> 
             RGBColor[0.2549, 0.23137, 0.42549], CellFrameLabels -> {{
                Cell[
                 BoxData[
                  DynamicBox[
                   ToBoxes[
                   ExternalEvaluate`FE`$ExternalLanguageMenuDataChanged; 
                    FrontEnd`Private`MakeExternalLanguageMenu[
                    ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage[], 
                    ExternalEvaluate`FE`GetExternalLanguageMenuData[]], 
                    StandardForm], 
                   TrackedSymbols :> {
                    ExternalEvaluate`FE`$ExternalLanguageMenuDataChanged}, 
                   ImageSizeCache -> {
                    35., {10.64208984375, 17.35791015625}}]], "Output", 
                 Background -> None, CellFrame -> 0], None}, {None, None}}, 
             CellFrameLabelMargins -> 0, AllowInlineCells -> False, 
             Hyphenation -> False, AutoQuoteCharacters -> {}, 
             PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Formula", 
             ScriptLevel -> 1, MenuSortingValue -> 1800, FontFamily -> Dynamic[
               CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
             FontColor -> GrayLevel[0.97], Background -> 
             RGBColor[0.18, 0.172, 0.22]], 
            Cell[
             StyleData["ExternalLanguage", "Presentation"], 
             CellMargins -> {{101, 10}, {8, 15}}, FontSize -> 18], 
            Cell[
             StyleData["ExternalLanguage", "SlideShow"], ShowGroupOpener -> 
             False, CellMargins -> {{110, 10}, {8, 15}}, FontSize -> 18], 
            Cell[
             StyleData["ExternalLanguage", "Printout"], 
             CellMargins -> {{48, 10}, {8, 8}}, 
             CellFrameMargins -> {{2, 8}, {8, 8}}]}, Open]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Notebook options settings", "Section"], 
         Cell[
          StyleData[All, "Working"], InitializationCellEvaluation -> False, 
          DockedCells -> None, DefaultNewCellStyle -> "Code", 
          ShowPredictiveInterface -> False], 
         Cell[
          StyleData["Notebook"], 
          CellBracketOptions -> {
           "Color" -> RGBColor[0., 0.8, 1], "HoverColor" -> 
            RGBColor[0.78, 0.64, 1], "Thickness" -> 1.3, "Widths" -> {2, 8}}, 
          StyleKeyMapping -> {
           "==" -> "WolframAlphaLong", "Backspace" -> "WolframAlphaShort", 
            "=" -> "WolframAlphaShort", "*" -> "Item", ">" -> 
            "ExternalLanguage", "Backspace" -> "Code"}, 
          AutoStyleOptions -> {
           "CommentStyle" -> {
             FontColor -> RGBColor[0.89, 0.56, 1., 0.95], ShowAutoStyles -> 
              False, ShowSyntaxStyles -> False, AutoNumberFormatting -> 
              False}, "ExcessArgumentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "FunctionLocalVariableStyle" -> {
             FontColor -> RGBColor[0.52549, 0.843137, 1.]}, 
            "GraphicsCompatibilityProblemStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "LocalScopeConflictStyle" -> {
             FontColor -> 
              RGBColor[
               0.8274509803921568, 0.21176470588235294`, 0.5098039215686274]},
             "LocalVariableStyle" -> {
             FontColor -> RGBColor[0., 0.8200000000000001, 0.32]}, 
            "MissingArgumentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "MisspelledWordStyle" -> {
             FontColor -> 
              RGBColor[
               0.8274509803921568, 0.21176470588235294`, 0.5098039215686274]},
             "NoKernelPresentStyle" -> {
             FontColor -> 
              RGBColor[
               0.16470588235294117`, 0.6313725490196078, 0.596078431372549]}, 
            "PatternVariableStyle" -> {
             FontColor -> RGBColor[0.11, 1., 0.08], FontSlant -> "Italic"}, 
            "StringStyle" -> {
             FontColor -> RGBColor[0.98, 0.71, 0.], ShowAutoStyles -> False, 
              ShowSyntaxStyles -> False, AutoNumberFormatting -> False}, 
            "UndefinedSymbolStyle" -> {FontColor -> RGBColor[0.42, 0.94, 1]}, 
            "UnknownOptionStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "UnwantedAssignmentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 
                0.1843137254901961]}}, 
          CodeAssistOptions -> {
           "AutoConvertEnable" -> False, 
            "HeadHighlightStyle" -> {
             Background -> None, FontColor -> RGBColor[1, 1, 0], FontWeight -> 
              Bold}, "MatchHighlightStyle" -> {
             Background -> None, FontColor -> RGBColor[1, 1, 0], FontWeight -> 
              Bold}}, TranslationOptions -> {"Language" -> None}, FontColor -> 
          RGBColor[0, 0.7, 1], Background -> GrayLevel[0.15]], 
         Cell[
          StyleData["DialogStyle"], FontColor -> RGBColor[0, 0.7, 1]], 
         Cell[
          StyleData["NotebookObject"], FontColor -> RGBColor[0, 0.7, 1]], 
         Cell[
          StyleData["LinguisticAssistant"], FontColor -> 
          RGBColor[0, 0.7, 1]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Title and Section Cells", "Section"], 
         Cell[
          StyleData["Title"], FontColor -> GrayLevel[1]], 
         Cell[
          StyleData["Chapter"], FontColor -> RGBColor[0.8, 0.8, 0.8]], 
         Cell[
          StyleData["Subchapter"], FontColor -> RGBColor[0.65, 0.05, 0.65]], 
         Cell[
          StyleData["Subtitle"], FontColor -> 
          RGBColor[0.196078, 0.694118, 0.862745]], 
         Cell[
          StyleData["Subsubtitle"], FontColor -> 
          RGBColor[0.196078, 0.394118, 0.562745]], 
         Cell[
          StyleData["Subsubtitle"]], 
         Cell[
          StyleData["Section"], FontColor -> 
          RGBColor[
           0.1399099717708095, 0.5224231326771954, 0.6501869230182346]], 
         Cell[
          StyleData["Subsection"], FontColor -> GrayLevel[0.749996]], 
         Cell[
          StyleData["Subsubsection"], FontColor -> 
          RGBColor[0.823529, 0.490654, 0.202274]], 
         Cell[
          StyleData["Subsubsubsection"], FontColor -> 
          RGBColor[0.954147, 0.694224, 0.124651]], 
         Cell[
          StyleData["Subsubsubsubsection"], FontColor -> 
          RGBColor[0.913237, 0.365469, 0.0854353]], 
         Cell[
          StyleData["Text"], FontFamily -> "Gill Sans Light", FontSize -> 14, 
          FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
          GrayLevel[0.683803]], 
         Cell[
          StyleData["Item"], CellDingbat -> 
          StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
            RGBColor[0, 0.7, 1]], CellMargins -> {{81, 10}, {4, 8}}, 
          ReturnCreatesNewCell -> True, 
          StyleKeyMapping -> {"Tab" -> "Subitem", "*" -> "Subitem"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          CellFrameLabelMargins -> 4, CounterIncrements -> "Item", 
          CounterAssignments -> {{"Subitem", 0}, {"Subsubitem", 0}}, 
          MenuSortingValue -> 1600, FontFamily -> "Source Sans Pro", FontSize -> 
          15], 
         Cell[
          StyleData["ItemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          StyleData["SubitemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          StyleData["SubsubitemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          CellGroupData[{
            Cell["Chapter", "Subsection"], 
            Cell[
             StyleData["Chapter"], CounterIncrements -> "Chapter", 
             CounterAssignments -> {{"Subchapter", 0}, {"Section", 0}, {
               "Equation", 0}, {"Figure", 0}, {"Subsubtitle", 0}, {
               "Item", 0}, {"Subitem", 0}, {"Subsubitem", 0}, {
               "ItemNumbered", 0}, {"SubitemNumbered", 0}, {
               "SubsubitemNumbered", 0}}, MenuSortingValue -> 1150, 
             MenuCommandKey :> "2"], 
            Cell[
             StyleData["Subchapter"], CellDingbat -> 
             StyleBox["\[MathematicaIcon]", Alignment -> Baseline, 
               RGBColor[0., 0.043, 0.9]], CounterIncrements -> "Subchapter", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Item", 0}, {"Subitem", 0}, {"Subsubitem", 0}, {
               "ItemNumbered", 0}, {"SubitemNumbered", 0}, {
               "SubsubitemNumbered", 0}}, MenuSortingValue -> 1200, 
             MenuCommandKey :> "3"]}, Open]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Input and Output cells", "Section"], 
         Cell[
          StyleData["Code"], 
          CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
          CellFrameLabelMargins -> {{17, Inherited}, {Inherited, Inherited}}, 
          FontSize -> 13, FontWeight -> Plain, FontColor -> GrayLevel[1], 
          Background -> GrayLevel[0.1]], 
         Cell[
          StyleData["InitializationCell"], 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellFrameMargins -> {{10, 10}, {5, 5}}, CellFrameLabelMargins -> -5,
           FontColor -> GrayLevel[1], Background -> GrayLevel[0.25]], 
         Cell[
          StyleData["Input"], 
          CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
          CellFrameLabelMargins -> {{17, Inherited}, {Inherited, Inherited}}, 
          FontSize -> 13, FontColor -> GrayLevel[0.7]], 
         Cell[
          StyleData["Output"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontSize -> 13], 
         Cell[
          StyleData["Message"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontColor -> 
          RGBColor[
           0.704600595101854, 0.24277103837644007`, 0.22278171969176777`]], 
         Cell[
          StyleData["Print"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontColor -> 
          GrayLevel[0.3]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["misc", "Section"], 
         Cell[
          StyleData["InformationCell"], 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.760174, 0.600641, 0.675288]}, FontColor -> 
          GrayLevel[0.3]], 
         Cell[
          StyleData["InformationLink"], FontColor -> 
          RGBColor[0.4525, 0.48138, 0.7]], 
         Cell[
          StyleData["InformationLinkLF"], FontColor -> 
          RGBColor[0.4525, 0.48138, 0.7]], 
         Cell[
          StyleData["CellLabel"], 
          CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
          LanguageCategory -> None, StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontSize -> 9]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Formulas and Programming", "Section"], 
         Cell[
          StyleData["DisplayFormula"], FontColor -> GrayLevel[0.85]], 
         Cell[
          StyleData["DisplayFormulaNumbered"], FontColor -> GrayLevel[0.85]], 
         Cell[
          StyleData["Program"], CellFrameColor -> GrayLevel[0.4]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          TextData[{"Styles for ", 
            StyleBox["Mathematica", FontSlant -> "Italic"], 
            " System\[Hyphen]specific Elements"}], "Section", 
          CellChangeTimes -> {{3.601920784160323*^9, 3.60192078489342*^9}, 
            3.60356525124664*^9, {3.6037117681643677`*^9, 
            3.6037117683195887`*^9}}], 
         Cell[
          CellGroupData[{
            Cell["FormatType Styles", "Subsection"], 
            Cell[
             StyleData["StandardForm"]], 
            Cell[
             StyleData["CellExpression"], FontColor -> GrayLevel[0], 
             Background -> GrayLevel[0.75]], 
            Cell[
             StyleData["CellLabel"], FontSize -> 9, FontColor -> 
             RGBColor[0.603861, 0.615915, 0.607843]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
            "Graphics Styles", "Subsection", 
             CellChangeTimes -> {{3.603565272271762*^9, 
              3.603565284491351*^9}}], 
            Cell[
             StyleData["GraphicsAxes"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Avenir", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]], 
            Cell[
             StyleData["GraphicsFrame"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Avenir", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]], 
            Cell[
             StyleData["Graphics3DAxes"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Arial", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]]}, 
           Open]]}, Open]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "14.2 for Microsoft Windows (64-bit) (December 26, 2024)", StyleDefinitions -> 
  "Default.nb"],
ExpressionUUID->"07f45638-d88c-4efd-919a-f5ca70f97309"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 247, 6, 282, "Title",ExpressionUUID->"93fcdfb1-a583-49fc-bc07-d93de6df1881",
 InitializationCell->True,
 InitializationGroup->True],
Cell[826, 30, 347, 8, 93, "Subtitle",ExpressionUUID->"c651d3da-35f1-417d-8300-82372e659e11",
 InitializationCell->True,
 InitializationGroup->True],
Cell[1176, 40, 352, 8, 93, "Subtitle",ExpressionUUID->"848a9044-d4e5-4e85-af1f-0f327b6d8446",
 InitializationCell->True,
 InitializationGroup->True],
Cell[1531, 50, 229, 5, 65, "Text",ExpressionUUID->"f4a9fc12-c802-4fd6-83ce-68766b8ecc86",
 InitializationCell->True,
 InitializationGroup->True],
Cell[1763, 57, 431, 9, 239, "Author",ExpressionUUID->"78fad76d-2c59-488e-a333-3816a8d4e9b1",
 InitializationCell->True,
 InitializationGroup->True],
Cell[2197, 68, 552, 9, 109, "Text",ExpressionUUID->"0f600f28-f76c-4d81-99bb-0adf37b5827e",
 InitializationCell->True,
 InitializationGroup->True],
Cell[CellGroupData[{
Cell[2774, 81, 15387, 322, 4523, "Code",ExpressionUUID->"4722122a-b9ba-4ce0-aaea-0eca9acc54d8",
 InitializationCell->True,
 InitializationGroup->True],
Cell[18164, 405, 2655, 51, 78, "Output",ExpressionUUID->"d5675b50-68e5-9947-bc68-789ffd6cf9c0"]
}, Open  ]],
Cell[20834, 459, 274, 4, 50, "Input",ExpressionUUID->"441de2af-a374-bf4e-b1c1-f0823b66c925"],
Cell[21111, 465, 1608, 34, 393, "Input",ExpressionUUID->"293914fd-3896-654c-9a8b-51fcb730c0fd"]
}, Open  ]]
}
]
*)

